DEFINE add_eax,ecx 01C8
DEFINE add_ecx,eax 01C1
DEFINE addi8_esp, 83C4
DEFINE and_eax, 81E0
DEFINE call E8
DEFINE call_eax FFD0
DEFINE cmpi8_eax, 83F8
DEFINE imul_eax,ecx 0FAFC1
DEFINE je 0F84
DEFINE jmp E9
DEFINE leave C9
DEFINE mov_eax, B8
DEFINE mov_ecx, B9
DEFINE mov_ebp,esp 89E5
DEFINE mov_[eax],ecx 8908
DEFINE mov_eax,[eax] 8B00
DEFINE movi8_[ebp+BYTE],eax 8945
DEFINE movi8_eax,[ebp+BYTE] 8B45
DEFINE movi8_ecx,[ebp+BYTE] 8B4D
DEFINE movsx_eax,BYTE_PTR_[ecx] 0FBE01
DEFINE push_eax 50
DEFINE push_ecx 51
DEFINE push_ebp 55
DEFINE sub_esp, 81EC
DEFINE ret C3

# .text section
:.text
:args_base
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x8045800
  leave
  ret
:elf_base
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x8048000
  leave
  ret
:base_address
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x4000000
  leave
  ret
:file_descriptors
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %base_address
  mov_ecx, %0x200
  push_ecx
  mov_ecx, %0x20000
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %add
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:sizeof_file_descriptor
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %8
  leave
  ret
:gfds
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %base_address
  mov_ecx, %0x01000010
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:sizeof_gfd
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %8
  leave
  ret
:filename_array
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %base_address
  mov_ecx, %0x200000
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:filename_size
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x400
  leave
  ret
:global_data
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %base_address
  mov_ecx, %0x10000
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:globals
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %global_data
  movi8_ecx,[ebp+BYTE] !8
  push_ecx
  mov_ecx, %4
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:regs_data
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:host_call_fn
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x4020024
  leave
  ret
:host_params
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0xA
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:host_stdout_addr
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x12
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:host_stdout
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %host_stdout_addr
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:syscall_hook
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x13
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:reloc_entrypoint_ptr
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x4020050
  leave
  ret
:int2str_tmp
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x15
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:brk_ptr
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x28
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:next_fd
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x29
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:next_filenum
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x2A
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:file_addr
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x2B
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:command_file
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x2C
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:char_buf
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x2D
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:command_buffer
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x2E
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:dummy_global
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0x82E
  push_eax
  call %globals
  addi8_esp, !4
  leave
  ret
:get_reg
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %regs_data
  mov_ecx, %4
  push_ecx
  movi8_ecx,[ebp+BYTE] !8
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:set_reg
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %regs_data
  mov_ecx, %0x4
  push_ecx
  movi8_ecx,[ebp+BYTE] !8
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:set_param
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %host_params
  mov_ecx, %0x4
  push_ecx
  movi8_ecx,[ebp+BYTE] !8
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:gfd_get_file_length
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %gfds
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_gfd
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  mov_ecx, %0x4
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:gfd_set_file_length
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %gfds
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_gfd
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  mov_ecx, %0x4
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:gfd_get_file_addr
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %gfds
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_gfd
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:gfd_set_file_addr
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %gfds
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_gfd
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:gfn_get_filename
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %filename_array
  movi8_[ebp+BYTE],eax !-4
  call %filename_size
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  leave
  ret
:fd_set_filenum
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %file_descriptors
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_file_descriptor
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:fd_get_filenum
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %file_descriptors
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_file_descriptor
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:fd_set_file_offset
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %file_descriptors
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_file_descriptor
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  mov_ecx, %4
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  movi8_ecx,[ebp+BYTE] !12
  push_ecx
  push_eax
  call %wi32
  addi8_esp, !8
  leave
  ret
:fd_get_file_offset
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  call %file_descriptors
  movi8_[ebp+BYTE],eax !-4
  call %sizeof_file_descriptor
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %mul
  addi8_esp, !8
  mov_ecx, %0x4
  push_ecx
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %add
  addi8_esp, !8
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
:mul
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  movi8_eax,[ebp+BYTE] !8
  movi8_ecx,[ebp+BYTE] !12
  imul_eax,ecx
  leave
  ret
:add
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  movi8_eax,[ebp+BYTE] !8
  movi8_ecx,[ebp+BYTE] !12
  add_eax,ecx
  leave
  ret
:wi32
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  movi8_eax,[ebp+BYTE] !8
  movi8_[ebp+BYTE],eax !-4
  movi8_eax,[ebp+BYTE] !-4
  movi8_ecx,[ebp+BYTE] !12
  mov_[eax],ecx
  mov_eax, %0
  leave
  ret
:ri8
  push_ebp
  mov_ebp,esp
  sub_esp, %4
  mov_eax, %0
  movi8_[ebp+BYTE],eax !-4
  movi8_eax,[ebp+BYTE] !8
  movi8_ecx,[ebp+BYTE] !-4
  add_ecx,eax
  movsx_eax,BYTE_PTR_[ecx]
  and_eax, %0xFF
  leave
  ret
:ri32
  push_ebp
  mov_ebp,esp
  sub_esp, %8
  movi8_eax,[ebp+BYTE] !8
  movi8_[ebp+BYTE],eax !-4
  movi8_eax,[ebp+BYTE] !-4
  movi8_[ebp+BYTE],eax !-8
  movi8_eax,[ebp+BYTE] !-8
  mov_eax,[eax]
  leave
  ret
:trap_syscalls_on
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %regs_data
  push_eax
  mov_eax, %0x4017BC
  push_eax
  mov_eax, %0xFFFE
  push_eax
  call %syscall
  addi8_esp, !12
  leave
  ret
:trap_syscalls_off
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  mov_eax, %0xFFFD
  push_eax
  call %syscall
  addi8_esp, !4
  leave
  ret
:dump_regs
  push_ebp
  mov_ebp,esp
  sub_esp, %0x1C
  mov_eax, %0
  push_eax
  call %get_reg
  addi8_esp, !4
  mov_ecx, %0
  push_ecx
  movi8_[ebp+BYTE],eax !-4
  call %get_reg
  addi8_esp, !4
  mov_ecx, %1
  push_ecx
  movi8_[ebp+BYTE],eax !-8
  call %get_reg
  addi8_esp, !4
  mov_ecx, %2
  push_ecx
  movi8_[ebp+BYTE],eax !-12
  call %get_reg
  addi8_esp, !4
  mov_ecx, %3
  push_ecx
  movi8_[ebp+BYTE],eax !-16
  call %get_reg
  addi8_esp, !4
  mov_ecx, %4
  push_ecx
  movi8_[ebp+BYTE],eax !-20
  call %get_reg
  addi8_esp, !4
  mov_ecx, %5
  push_ecx
  movi8_[ebp+BYTE],eax !-24
  call %get_reg
  addi8_esp, !4
  mov_ecx, %6
  push_ecx
  movi8_[ebp+BYTE],eax !-28
  call %get_reg
  addi8_esp, !4
  push_eax
  movi8_eax,[ebp+BYTE] !-28
  push_eax
  movi8_eax,[ebp+BYTE] !-24
  push_eax
  movi8_eax,[ebp+BYTE] !-20
  push_eax
  movi8_eax,[ebp+BYTE] !-16
  push_eax
  movi8_eax,[ebp+BYTE] !-12
  push_eax
  movi8_eax,[ebp+BYTE] !-8
  push_eax
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  mov_eax, %0x403000
  push_eax
  call %THUNK_printf
  addi8_esp, !0x24
  leave
  ret
:wrap_syscall_alt
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  movi8_eax,[ebp+BYTE] !36
  push_eax
  mov_eax, %0
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !24
  push_eax
  mov_eax, %1
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !32
  push_eax
  mov_eax, %2
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !28
  push_eax
  mov_eax, %3
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !12
  push_eax
  mov_eax, %4
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !8
  push_eax
  mov_eax, %5
  push_eax
  call %set_reg
  addi8_esp, !8
  movi8_eax,[ebp+BYTE] !16
  push_eax
  mov_eax, %6
  push_eax
  call %set_reg
  addi8_esp, !8
  call %wrap_syscall
  leave
  ret
:wrap_syscall
  push_ebp
  mov_ebp,esp
  sub_esp, %0xC
# IF_wrap_syscall_0
  call %syscall_hook
  push_eax
  call %ri32
  addi8_esp, !4
  movi8_[ebp+BYTE],eax !-12
  cmpi8_eax, !0
  je %_END_IF_wrap_syscall_0
  movi8_eax,[ebp+BYTE] !-12
  call_eax
  jmp %0x21
:_END_IF_wrap_syscall_0
  call %trap_syscalls_off
  mov_eax, %0x403046
  push_eax
  call %THUNK_printf
  addi8_esp, !4
  mov_eax, %1
  push_eax
  call %THUNK_exit
  addi8_esp, !4
  leave
  ret
:load_boot
  push_ebp
  mov_ebp,esp
  sub_esp, %0xC
  mov_eax, %0x40305A
  push_eax
  movi8_eax,[ebp+BYTE] !8
  push_eax
  call %THUNK_fopen
  addi8_esp, !8
  movi8_[ebp+BYTE],eax !-4
  call %elf_base
  movi8_[ebp+BYTE],eax !-8
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  mov_eax, %0x1000
  push_eax
  mov_eax, %1
  push_eax
  movi8_eax,[ebp+BYTE] !-8
  push_eax
  call %THUNK_fread
  addi8_esp, !16
  movi8_[ebp+BYTE],eax !-12
  cmpi8_eax, !0
  je '0D000000'
   movi8_eax,[ebp+BYTE] !-8
   movi8_ecx,[ebp+BYTE] !-12
  add_eax,ecx
  movi8_[ebp+BYTE],eax !-8
'EB CB'
  movi8_eax,[ebp+BYTE] !-4
  push_eax
  call %THUNK_fclose
  addi8_esp, !4
  call %elf_base
  movi8_ecx,[ebp+BYTE] !-8
'29C1'
'89C8'
  leave
  ret
:get_param
  push_ebp
  mov_ebp,esp
  sub_esp, %0
  call %host_params
  movi8_ecx,[ebp+BYTE] !8
'C1E1 02'
  add_eax,ecx
  push_eax
  call %ri32
  addi8_esp, !4
  leave
  ret
