cjsawk: a self-hosted compiler for a subset of C, JavaScript, and AWK

live web version:

https://cosinusoidally.github.io/tcc_simple/experiments/cjsawk/

Note the web version only compiles as far as assembly language. The native
bootstrap scripts build down to executables.

How to build native versions:

./mk

This will build the Linux executable version of cjsawk.exe via the following
bootstrap path:

hex0
hex1
hex2
M0
cc_x86_min (see ../m2min_v2/cc_x86_min.M1)
js_to_c (see ../m2min_v3/js_to_c/js_to_c_simple.c)
cjsawk.js (via cc_x86_min.exe and js_to_c.exe)

cjsawk.js is then used to rebuild itself twice to reach a fixed point.

The mk script then proceeds to build pnut_js (see ../pnut_refactor/pnut.js) and
then builds tcc-boot-mes (see ../mk_tcc-boot-mes). tcc-boot-mes is capable
of building tcc-0.9.27 with some assitance from my tcc_bootstrap_alt project.

The above is essentially the "bootstrap from nothing" approach. There are
several other supported paths:

./mk_all

This is the most thorough path. This bootstraps cjsawk.exe via:

These C Compilers:

cc_x86_min
GCC
tcc (the Tiny C Compiler)

The following JavaScript VMs:

nodejs
jsshell (the Mozilla Spidermonkey JS VM, version 45 is used)

The following AWK VMs:

gawk (GNU AWK)
mawk (the Michael Brennan AWK, common on debian systems)
nawk (One true AWK, common on BSD systems, and Android)
busybox awk (the version of AWK included in busybox)
wak (a new AWK implementation intended to fit a similar niche to busybox awk)

Each of the above paths build bit identical versions of cjsawk.exe so we can be
sure that any path is capable of building pnut_js and then use pnut_js to build
tcc-boot-mes.

There is also a shorter version of ./mk_all called ./mk_all_quick . This version
only tests 1 version of awk (mawk) and completes much quicker (on my machine
around 40 seconds, rather than 7 mins).

Web version:
============

There is also a web based version. If you start up a web server in this
directory and visit in a web browser it will build cjsawk.exe.M1 which will be
bit identical to the version built via any of the other bootstrap paths.

There's a live github version here:

https://cosinusoidally.github.io/tcc_simple/experiments/cjsawk/

or locally, eg:

python2 -m SimpleHTTPServer

and then vist http://127.0.0.1:8000

This has been tested in Firefox, Chrome, and Safari.

Other paths
===========

Note this bootstrap will also work with duktape, with the version that is
included in my mishmashvm project (but note that it will prepend some junk at
the start of the output as that copy of duktape dumps some debug info to
stdout).

It's likely it will also build with mujs, eg the copy in ../mujs_min but I have
not tested it yet.
