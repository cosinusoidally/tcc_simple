See also docs/ for detailed technical and design info. Information below gives
a relatively brief overview of the bootstrap modes.

tl;dr

./mk_m2min_v3

will bootstrap from nothing up to a statically linked version of tcc (based on
the live-bootstrap bootstrappable version of tcc).

This default bootstrap path will use the readable assembly language version of
m2min_v3.js (m2min_v3.M1). The m2min_v3.M1 file is assembled by M0 from the
stage0-posix project. All dependencies are in tree.

There are alternative diverse bootstrap paths available in this directory if
you do not wish to trust or manually audit m2min_v3.M1 (detailed below). Note
that all bootstrap paths will rebuild m2min_v3.js and so regenerate a bit
identical version of m2min_v3.M1 that will be deposited in artifacts as the file
./artifacts/boot0.exe.M1

If you run:

$ sha256sum -c sums_m2min_v3
m2min_v3.M1: OK
artifacts/boot0.exe.M1: OK

You will see that the two files are identical.

This default bootstrap path takes us up to tcc-boot-mes, which will be deposited
in ../artifacts/tcc-boot-mes . tcc-boot-mes is based on:

https://gitlab.com/janneke/tinycc/-/tree/mes-0.27?ref_type=heads

with patches from:

https://gitlab.com/janneke/tinycc/-/tree/mes-0.27?ref_type=heads

The actual version of bootstrappable tcc is from:

https://github.com/fosslinux/live-bootstrap/blob/master/steps/tcc-0.9.26/sources

which is currently:

https://lilypond.org/janneke/tcc/tcc-0.9.26-1147-gee75a10c.tar.gz 6b8cbd0a5fed0636d4f0f763a603247bc1935e206e1cc5bda6a2818bab6e819f tcc-0.9.26.tar.gz

This version is in tree (../tcc-0.9.26-lb/) and already has the patches applied.

More detailed techincal documentation will be included in the docs/ directory,
but breifly there are several further bootstrap paths:

mk_m2min_v3_gcc        bootstrap with gcc

mk_m2min_v3_nodejs     bootstrap with nodejs, note this stops after regnerating
                       m2min_v3.M1

mk_m2min_v3_awk        bootstrap with awk (multiple awk versions are supported).
                       Again this also stops after regenerating m2min_v3.M1

mk_m2min_v3_awk_exe    run mk_m2min_v3_awk then continue all the way up to
                       tcc-boot-mes . This relies on awk versions of M0 and hex2
mk_m2min_v3_stage0     bootstrap up to tcc-boot-mes but using base tools from
                       an out of tree version of stage0-posix. You need to set
                       STAGE0_PATH to the bin dir of your stage0-posix build.
                       This version only depends on stage0-posix tools and uses
                       m2min_v3.M1 to avoid the need for cc_x86 or M2-Planet

mk_m2min_v3_cc_x86_min bootstrap with cc_x86_min from ../m2min_v2 this builds
                       m2min_v3.js using cc_x86_min and js_to_c. Note cc_x86_min
                       is a cut down version of cc_x86 that is only capable of
                       compiling a very simple subset of C that is very close
                       to the m2min_v3.js dialect (after it has been fed through
                       js_to_c).

As you can see, there are multiple diverse bootstrap paths that bootstrap from
multiple independent languages and independent implementations of those
languages. The aim of this is to allow us to easily verify that the checked in
compilation artifact m2min_v3.M1 has not been tampered with and does not contain
malicious code. m2min_v3.M1 can also be manually verified by hand more easily
than cc_x86.M1 (at least, in my opinion it is having read the whole of cc_x86.M1
and created the heavily cut down cc_x86_min.M1 version of cc_x86).
